# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//testing/test.gni")

declare_args() {
  enable_ie_myriad = false
}

if (is_win) {
  cldnn_dll = "clDNN64.dll"
  mkldnn_dll = "mkldnn.dll"
  omp_dll = "vcomp140.dll"
  os_folder = "Windows64"
} else if (is_linux) {
  cldnn_dll = "libclDNN64.so"
  mkldnn_dll = "libmkldnn.so"
  omp_dll = "libiomp5.so"
  os_folder = "Linux64"
} else if (is_mac) {
  mkldnn_dll = "libmkldnn.0.dylib"
  omp_dll = "libiomp5.dylib"
  os_folder = "Mac64"
}

source_set("ie") {
  sources = [
    "compilation_delegate_ie.cc",
    "compilation_delegate_ie.h",
    "execution_impl_ie.cc",
    "execution_impl_ie.h",
  ]
  include_dirs =
      [ "//third_party/libinference_engine/dldt/inference-engine/include/" ]

  configs -= [ "//build/config/compiler:no_exceptions" ]
  configs += [ "//build/config/compiler:exceptions" ]
  configs -= [ "//build/config/compiler:no_rtti" ]
  configs += [ "//build/config/compiler:rtti" ]

  cflags_cc = [
    "-Wno-pessimizing-move",
    "-Wno-extra-semi",
    "-Wno-defaulted-function-deleted",
  ]

  deps = [
    "//services/ml/public/mojom",
  ]
}

source_set("lib") {
  sources = [
    "common.cc",
    "common.h",
    "ml_service.cc",
    "ml_service.h",
    "ml_switches.cc",
    "ml_switches.h",
  ]

  if (is_linux) {
    sources += [
      "cl_dnn_custom_kernels.cc",
      "cl_dnn_custom_kernels.h",
      "cl_dnn_symbol_table.cc",
      "cl_dnn_symbol_table.h",
      "compilation_delegate_cl_dnn.cc",
      "compilation_delegate_cl_dnn.h",
      "compilation_delegate_mkl_dnn.cc",
      "compilation_delegate_mkl_dnn.h",
      "compilation_impl.cc",
      "compilation_impl.h",
      "execution_impl_cl_dnn.cc",
      "execution_impl_cl_dnn.h",
      "execution_impl_mkl_dnn.cc",
      "execution_impl_mkl_dnn.h",
      "late_binding_symbol_table.cc",
      "late_binding_symbol_table.h",
      "mkl_dnn_symbol_table.cc",
      "mkl_dnn_symbol_table.h",
      "model_impl.cc",
      "model_impl.h",
      "neural_network_impl.cc",
      "neural_network_impl.h",
    ]
  } else if (is_android) {
    sources += [
      "compilation_impl_android.cc",
      "compilation_impl_android.h",
      "execution_impl_android.cc",
      "execution_impl_android.h",
      "model_impl_android.cc",
      "model_impl_android.h",
      "neural_network_impl_android.cc",
      "neural_network_impl_android.h",
    ]

    include_dirs = [ "${android_ndk_root}/sysroot/usr/include" ]

    libdir = ""
    if (current_cpu == "x86") {
      libdir = "arch-x86/usr/lib"
    } else if (target_cpu == "arm") {
      libdir = "arch-arm/usr/lib"
    } else if (target_cpu == "mips") {
      libdir = "arch-mips/usr/lib"
    } else if (target_cpu == "arm64") {
      libdir = "arch-arm64/usr/lib"
    } else if (target_cpu == "x64") {
      libdir = "arch-x86_64/usr/lib64"
    } else if (target_cpu == "mips64") {
      libdir = "arch-mips64/usr/lib64"
    } else {
      assert(false, "Need android neuralnetworks support for your target arch.")
    }
    lib_dirs = [ "${android_ndk_root}/platforms/android-27/${libdir}" ]

    libs = [ "neuralnetworks" ]
  } else if (is_mac) {
    sources += [
      "compilation_delegate_bnns.h",
      "compilation_delegate_bnns.mm",
      "compilation_delegate_mkl_dnn.cc",
      "compilation_delegate_mkl_dnn.h",
      "compilation_delegate_mps.h",
      "compilation_delegate_mps.mm",
      "compilation_impl.cc",
      "compilation_impl.h",
      "compilation_impl_mac.h",
      "compilation_impl_mac.mm",
      "execution_impl_bnns.h",
      "execution_impl_bnns.mm",
      "execution_impl_mkl_dnn.cc",
      "execution_impl_mkl_dnn.h",
      "execution_impl_mps.h",
      "execution_impl_mps.mm",
      "late_binding_symbol_table.cc",
      "late_binding_symbol_table.h",
      "mkl_dnn_symbol_table.cc",
      "mkl_dnn_symbol_table.h",
      "ml_utils_mac.h",
      "ml_utils_mac.mm",
      "model_impl.cc",
      "model_impl.h",
      "model_impl_mac.h",
      "model_impl_mac.mm",
      "mps_protocols_impl.h",
      "mps_protocols_impl.mm",
      "mpscnn_context.h",
      "mpscnn_context.mm",
      "neural_network_impl.cc",
      "neural_network_impl.h",
      "neural_network_impl_mac.h",
      "neural_network_impl_mac.mm",
      "opengl_metal_mac/fragment_shader.h",
      "opengl_metal_mac/interoperable_texture.h",
      "opengl_metal_mac/interoperable_texture.m",
      "opengl_metal_mac/opengl_renderer.h",
      "opengl_metal_mac/opengl_renderer.mm",
      "opengl_metal_mac/shared_metal.h",
      "opengl_metal_mac/shared_metal.mm",
      "opengl_metal_mac/vertex_shader.h",
    ]

    libs = [
      "Accelerate.framework",
      "Metal.framework",
      "MetalPerformanceShaders.framework",
      "OpenGL.framework",
      "GLKit.framework",
    ]
  } else if (is_win) {
    sources += [
      "cl_dnn_custom_kernels.cc",
      "cl_dnn_custom_kernels.h",
      "compilation_delegate_cl_dnn.cc",
      "compilation_delegate_cl_dnn.h",
      "compilation_delegate_dml.cc",
      "compilation_delegate_dml.h",
      "compilation_delegate_mkl_dnn.cc",
      "compilation_delegate_mkl_dnn.h",
      "compilation_impl.cc",
      "compilation_impl.h",
      "dml/float16_compressor.h",
      "dml/format_data.cc",
      "dml/format_data.h",
      "dml/format_input_shader.h",
      "dml/format_output_shader.h",
      "dml_d3dx12_utils.h",
      "dml_symbol_table.cc",
      "dml_symbol_table.h",
      "execution_impl_cl_dnn.cc",
      "execution_impl_cl_dnn.h",
      "execution_impl_dml.cc",
      "execution_impl_dml.h",
      "execution_impl_mkl_dnn.cc",
      "execution_impl_mkl_dnn.h",
      "late_binding_symbol_table.cc",
      "late_binding_symbol_table.h",
      "ml_utils_dml.cc",
      "ml_utils_dml.h",
      "model_impl.cc",
      "model_impl.h",
      "neural_network_impl.cc",
      "neural_network_impl.h",
    ]

    lib_dirs = [
      "//third_party/clDNN/build/out/${os_folder}/Release",
      "//third_party/mkl-dnn/lib/${os_folder}/Release",
    ]

    libs = [
      "clDNN64.lib",
      "mkldnn.lib",
    ]
  } else {
    sources += [
      "neural_network_impl.cc",
      "neural_network_impl.h",
    ]
  }

  deps = [
    "//mojo/public/cpp/bindings",
    "//skia",
  ]

  if (is_win || is_linux) {
    deps += [
      ":copy_cldnn_dll",
      ":copy_mkldnn_dll",
      ":copy_omp_dll",
    ]
  } else if (is_mac) {
    deps += [
      ":copy_mkldnn_dll",
      ":copy_omp_dll",
    ]
  }

  public_deps = [
    "//base",
    "//services/ml/public/mojom",
    "//services/service_manager/public/cpp",
  ]

  if (is_linux) {
    deps += [
      ":ie",
      "//third_party/libinference_engine:libMKLDNNPlugin",
      "//third_party/libinference_engine:libclDNNPlugin",
      "//third_party/libinference_engine:libinference_engine",
    ]

    if (enable_ie_myriad) {
      deps += [ "//third_party/libinference_engine:libmyriadPlugin" ]
    }
  }
}

if (is_win || is_linux || is_mac) {
  mkldnn_dll_path = "//third_party/mkl-dnn/lib/${os_folder}/Release"
  copy("copy_mkldnn_dll") {
    sources = [
      "${mkldnn_dll_path}/${mkldnn_dll}",
    ]
    outputs = [
      "$root_out_dir/{{source_file_part}}",
    ]
  }
  copy("copy_omp_dll") {
    sources = [
      "${mkldnn_dll_path}/${omp_dll}",
    ]
    outputs = [
      "$root_out_dir/{{source_file_part}}",
    ]
  }
  if (is_win || is_linux) {
    cldnn_dll_path = "//third_party/clDNN/build/out/${os_folder}/Release"
    copy("copy_cldnn_dll") {
      sources = [
        "${cldnn_dll_path}/${cldnn_dll}",
      ]
      outputs = [
        "$root_out_dir/{{source_file_part}}",
      ]
    }
  }
}
